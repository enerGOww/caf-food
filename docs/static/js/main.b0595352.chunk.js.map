{"version":3,"sources":["img/cat.png","components/Item.jsx","components/ItemsContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Item","title","brand","taste","quantityOfFeed","feedText","quantityOfBonus","bonusText","additionalInfo","totalWeight","available","description","initialState","React","useState","state","setState","cartTitle","setCartTitle","titleEl","useRef","bonus","handleClick","className","onClick","onMouseEnter","onMouseLeave","ref","src","cat","alt","ItemsContainer","items","setItems","useEffect","fetch","then","res","json","map","item","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,iC,8JC8F5BC,MA3Ff,YAYI,IAXFC,EAWC,EAXDA,MACAC,EAUC,EAVDA,MACAC,EASC,EATDA,MACAC,EAQC,EARDA,eACAC,EAOC,EAPDA,SACAC,EAMC,EANDA,gBACAC,EAKC,EALDA,UACAC,EAIC,EAJDA,eACAC,EAGC,EAHDA,YACAC,EAEC,EAFDA,UACAC,EACC,EADDA,YAEMC,EAAeF,EAAY,UAAY,WAD5C,EAEyBG,IAAMC,SAASF,GAFxC,mBAEMG,EAFN,KAEaC,EAFb,OAGiCH,IAAMC,SAASb,GAHhD,mBAGMgB,EAHN,KAGiBC,EAHjB,KAIKC,EAAUN,IAAMO,SAChBC,EAAQf,EAAkB,oCAAE,2BAAIA,GAAN,IAA4BC,GAAgB,oCAAGA,GAEzEe,EAAc,WAClB,GAAc,aAAVP,EAAJ,CAIA,GAAc,YAAVA,EACF,OAAOC,EAAS,iBAGlBE,EAAajB,GACbe,EAAS,aA+BX,OACE,wBAAIO,UAAS,QACX,yBACEA,UAAS,qBAAgBR,GACzBS,QAASF,EACTG,aAvBe,WACL,kBAAVV,IACFC,EAAS,YACTE,EAAa,4FAGD,aAAVH,GACFG,EAAa,4FAiBXQ,aAbe,WACnB,GAAc,kBAAVX,EACF,OAAOC,EAAS,YAElBE,EAAajB,KAWT,0BAAMsB,UAAU,cAAcI,IAAKR,GAAUF,GAC7C,6BACA,uBAAGM,UAAU,eAAerB,GAC5B,6BACA,uBAAGqB,UAAU,eAAepB,GAC5B,6BACA,0BAAMoB,UAAU,uBAAsB,2BAAInB,GAA1C,IAA+DC,GAC/D,6BACA,0BAAMkB,UAAU,eAAeF,GAC/B,6BACA,0BAAME,UAAU,oBAAoBf,GACpC,6BACA,yBAAKe,UAAU,YAAYK,IAAKC,IAAKC,IAAI,oDAAY7B,MAAM,sDAC3D,yBAAKsB,UAAU,gBACb,0BAAMA,UAAU,sBAAsBd,GACtC,0BAAMc,UAAU,mBAAhB,kBAGJ,yBAAKA,UAAS,+CAA0CR,IArDtDL,EACY,YAAVK,EACK,2KAA6B,0BAAMQ,UAAU,YAAYC,QAASF,GAArC,8BAE/B,oCAAGX,GAEL,yFAAaR,EAAb,oECvBI4B,MAhBf,WAA2B,IAAD,EACElB,IAAMC,SAAS,IADjB,mBACjBkB,EADiB,KACVC,EADU,KASxB,OANApB,IAAMqB,WAAU,WACdC,MAAM,kDACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GAAD,OAAUL,EAASK,EAAKN,YAC/B,IAGD,wBAAIT,UAAU,mBACXS,GAASA,EAAMO,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,eAAMC,IAAKD,EAAKE,IAAQF,SCF7CG,MATf,WACE,OACE,yBAAKpB,UAAU,OACb,wBAAIA,UAAU,cAAd,sIACA,kBAAC,EAAD,QCKcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b0595352.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.dce0de7e.png\";","import React from \"react\";\nimport cat from \"../img/cat.png\"\n\nfunction Item({\n  title,\n  brand,\n  taste,\n  quantityOfFeed,\n  feedText,\n  quantityOfBonus,\n  bonusText,\n  additionalInfo,\n  totalWeight,\n  available,\n  description\n}) {\n  const initialState = available ? 'default' : 'disabled';\n  const [state, setState] = React.useState(initialState);\n  const [cartTitle, setCartTitle] = React.useState(title);\n  const titleEl = React.useRef();\n  const bonus = quantityOfBonus ? <><b>{quantityOfBonus}</b> {bonusText}</> : <>{bonusText}</>;\n\n  const handleClick = () => {\n    if (state === 'disabled') {\n      return;\n    }\n\n    if (state === 'default') {\n      return setState('just-selected');\n    }\n\n    setCartTitle(title);\n    setState('default');\n  };\n\n  const getDescription = () => {\n    if (available) {\n      if (state === 'default') {\n        return <>Чего сидишь? Порадуй котэ, <span className=\"item__buy\" onClick={handleClick}>купи.</span></>;\n      }\n      return <>{description}</>;\n    }\n    return <>Печалька, {taste} закончился</>;\n  };\n\n  const onMouseEnter = () => {\n    if (state === 'just-selected') {\n      setState('selected');\n      setCartTitle('Котэ не одобряет?');\n    }\n\n    if (state === 'selected') {\n      setCartTitle('Котэ не одобряет?');\n    }\n  };\n\n  const onMouseLeave = () => {\n    if (state === 'just-selected') {\n      return setState('selected');\n    }\n    setCartTitle(title);\n  };\n\n  return (\n    <li className={`item`}>\n      <div\n        className={`card card--${state}`}\n        onClick={handleClick}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n      >\n        <span className=\"card__title\" ref={titleEl}>{cartTitle}</span>\n        <br />\n        <b className=\"card__brand\">{brand}</b>\n        <br />\n        <b className=\"card__taste\">{taste}</b>\n        <br />\n        <span className=\"card__feed-quantity\"><b>{quantityOfFeed}</b> {feedText}</span>\n        <br />\n        <span className=\"card__bonus\">{bonus}</span>\n        <br />\n        <span className=\"card__additional\">{additionalInfo}</span>\n        <br />\n        <img className=\"card__img\" src={cat} alt=\"Сытый кот\" title=\"Сытый кот\" />\n        <div className=\"card__weight\">\n          <span className=\"card__weight-total\">{totalWeight}</span>\n          <span className=\"card__weight-kg\">кг</span>\n        </div>\n      </div>\n      <div className={`item__description item__description--${state}`}>{getDescription()}</div>\n    </li>\n  )\n}\n\nexport default Item\n","import React from \"react\";\nimport Item from \"./Item\";\n\nfunction ItemsContainer() {\n  const [items, setItems] = React.useState([])\n\n  React.useEffect(() => {\n    fetch('https://energoww.github.io/cat-food/items.json')\n      .then((res) => res.json())\n      .then((json) => setItems(json.items))\n  }, [])\n\n  return (\n    <ul className=\"items-container\">\n      {items && items.map((item) => <Item key={item.id} {...item} />)}\n    </ul>\n  )\n}\n\nexport default ItemsContainer","import React from 'react';\nimport {ItemsContainer} from \"./components\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">Ты сегодня покормил кота?</h1>\n      <ItemsContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}